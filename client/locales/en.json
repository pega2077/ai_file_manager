{
  "common": {
    "appTitle": "AI File Manager",
    "confirm": "Confirm",
    "cancel": "Cancel",
    "save": "Save",
    "close": "Close",
    "back": "Back",
    "next": "Next",
    "select": "Select",
    "loading": "Loading...",
    "retry": "Try Again",
    "success": "Success",
    "error": "Error",
    "optional": "Optional"
  },
  "menu": {
    "file": "File",
    "importFile": "Import File",
    "clearAllData": "Clear All Data...",
    "quit": "Quit",
    "window": "Window",
    "minimize": "Minimize",
    "close": "Close",
    "openBotWindow": "Open Bot Window",
    "view": "View",
    "reload": "Reload",
    "forceReload": "Force Reload",
    "toggleDevTools": "Toggle Developer Tools",
    "actualSize": "Actual Size",
    "zoomIn": "Zoom In",
    "zoomOut": "Zoom Out",
    "help": "Help",
    "viewLogs": "View Logs",
    "about": "About"
  },
  "tray": {
    "showMain": "Show Main Window",
    "showBot": "Show Bot Window",
    "viewLogs": "View Logs",
    "closeApp": "Close App",
    "tooltip": "AI File Manager"
  },
  "dialogs": {
    "clearConfirmTitle": "Confirm Clear All Data",
    "clearConfirmMessage": "This will permanently delete the database, vectors, and temp files. The app will then restart.",
    "clearConfirmCancel": "Cancel",
    "clearConfirmOk": "Delete and Restart",
    "clearDoneTitle": "Data Cleared",
    "clearDoneMessage": "All application data has been cleared. The app will now restart.",
    "clearFailedTitle": "Clear Data Failed",
    "clearFailedMessage": "Failed to clear all data. Please check logs for details."
  },
  "setup": {
    "stepOneTitle": "Directory Selection",
    "stepOneDescription": "Choose a folder and confirm the recommended structure.",
    "stepTwoTitle": "Professional Information",
    "stepTwoDescription": "Describe your profession and purpose.",
    "stepThreeTitle": "Directory Creation",
    "stepThreeDescription": "Create the directory structure and complete the setup.",
    "generalSettings": "General Settings",
    "optionalSettings": "Advanced Options",
    "form": {
      "pageTitle": "File Management",
      "pageDescription": "View and manage files imported into the system",
      "professionLabel": "Profession",
      "purposeLabel": "Purpose",
      "keywordsLabel": "Keywords",
          "path": "File Path",
      "examplesLabel": "Examples",
      "notesLabel": "Additional Notes",
      "maxDepth": "Directory Depth",
      "minDirectories": "Minimum Directories",
      "maxDirectories": "Maximum Directories",
      "temperature": "Temperature",
      "directoryStyle": "Directory Style",
      "llmProviderLabel": "LLM Provider"
    },
    "actions": {
      "fetchRecommendation": "Fetch Recommended Structure",
      "regenerate": "Regenerate",
      "continue": "Continue",
      "selectTarget": "Select Target Folder",
      "createStructure": "Create Structure And Complete Setup",
      "pendingStructure": "Pending Directory Structure",
      "selectedPath": "Selected: {path}"
    },
    "descriptions": {
      "llmProvider": "Choose which LLM provider to use for directory suggestions and analysis."
    },
    "hints": {
      "emptyDirectory": "You can pick an empty folder and let the AI create a directory structure for you.",
      "existingDirectory": "You can also use an existing folder and skip the directory creation step."
    },
    "messages": {
      "fetchSuccess": "Directory recommendation generated successfully",
      "fetchPresetSuccess": "Loaded preset directory structure from local configuration",
      "fetchError": "Failed to fetch the directory structure",
      "selectFolderError": "Failed to select folder",
      "missingTarget": "Please choose a destination folder",
      "createSuccess": "Directory structure created successfully",
      "createError": "Failed to generate directory structure",
      "providerUpdated": "LLM provider updated",
      "providerUpdateError": "Failed to update LLM provider",
      "listDirectoryError": "Failed to inspect directory contents.",
      "emptyDirectoryReady": "Selected directory is empty. AI can create the structure for you.",
      "skipCreateSuccess": "Setup completed using the existing directory structure.",
      "finalizeError": "Failed to save setup configuration. Please try again.",
      "directoryHasItems": "This directory already contains {count} items. You can skip directory creation if the layout fits your needs.",
      "directoryIsEmpty": "This directory is empty and ready for AI to generate the structure."
    },
    "dialogs": {
      "existingStructureTitle": "Existing structure detected",
      "existingStructureContent": "The selected folder ({path}) already contains {count} items. Do you want to skip directory creation and finish setup instead?",
      "skipCreation": "Skip creation and finish",
      "continueCreation": "Continue creating folders"
    },
    "cards": {
      "stepOne": "Step 1 - Select Working Directory",
      "stepTwo": "Step 2 - Describe Your Needs",
      "stepThree": "Step 3 - Create Directory Structure",
      "recommendations": "Recommended Directory Structure",
      "pending": "Structure To Be Created"
    },
    "placeholders": {
      "profession": "Select or enter your profession",
      "purpose": "e.g. project documentation, research notes"
    },
    "validation": {
      "professionRequired": "Please enter your profession",
      "purposeRequired": "Please describe the purpose"
    },
    "options": {
      "profession": {
        "softwareEngineer": "Software Engineer",
        "lawyer": "Lawyer",
        "teacher": "Teacher",
        "student": "Student",
        "projectManager": "Project Manager",
        "contentCreator": "Content Creator",
        "designer": "Designer"
      },
      "professionPurposes": {
        "softwareEngineer": "Organize project source code, design documents, technical notes, and deployment scripts.",
        "lawyer": "Store case files, legal research, contracts, and client correspondence.",
        "teacher": "Manage lesson plans, lecture notes, student assignments, and grading records.",
        "student": "Organize study notes, assignments, research papers, and project files.",
        "projectManager": "Keep project plans, timelines, meeting notes, requirements, and reports.",
        "contentCreator": "Store drafts, media assets, scripts, publication schedules, and project briefs.",
        "designer": "Manage research, design concepts, working files, client feedback, and final deliverables."
      },
      "style": {
        "flat": "Flat",
        "hierarchical": "Hierarchical"
      },
      "llmProviders": {
        "ollama": "Ollama (local or gateway)",
        "pega": "Pega Platform",
        "openai": "OpenAI",
        "openrouter": "OpenRouter",
        "bailian": "Alibaba Bailian",
        "azureOpenai": "Azure OpenAI"
        },
        "pegaModes": {
          "ollama": "Pega Ollama gateway",
          "openrouter": "Pega OpenRouter proxy"
        }
    }
  },
  "backend": {
    "files": {
      "create": {
        "success": "Folder structure created successfully",
        "invalidTarget": "Target folder path is required",
        "emptyStructure": "Folder structure cannot be empty",
        "failure": "Failed to create folder structure"
      },
      "errors": {
        "textConversionFailed": "Failed to convert file to text"
      }
    },
    "common": {
      "llmUnavailable": "LLM service is unavailable, please try again later",
      "llmResponseError": "LLM response error: {reason}"
    },
    "chat": {
      "directoryFailure": "Failed to generate directory structure"
    }
  },
  "settings": {
    "pageTitle": "Settings",
    "sections": {
      "general": "General",
      "workDirectory": "Workspace",
      "api": "API Configuration",
      "llm": "LLM Provider",
      "actions": "Actions"
    },
    "labels": {
      "theme": "Theme",
      "language": "Language",
      "autoSave": "Auto-save",
      "showHiddenFiles": "Show hidden files",
      "enablePreview": "File preview",
      "autoSaveRAG": "Auto-save to RAG",
      "autoTagEnabled": "Auto tagging",
      "tagSummaryMaxLength": "Tag summary max length",
      "autoClassify": "Auto classify without confirmation",
      "useLocalService": "Use local service",
      "workDirectory": "Current workspace",
      "apiBaseUrl": "API base URL",
      "llmProvider": "LLM provider",
      "pegaApiKey": "Stored Pega API key",
      "pegaAccount": "Signed-in Pega account",
  "pegaMode": "Pega mode",
  "pegaStatus": "Pega service status",
  "pegaOllamaStatus": "Ollama gateway",
  "pegaOpenrouterStatus": "OpenRouter proxy",
      "pegaUserEmail": "Email",
      "pegaUserPhone": "Phone",
      "pegaUserStatus": "Status",
      "pegaUserIp": "Last IP",
      "pegaUserTokenBalance": "Available tokens",
      "pegaUserMonthlyTokenQuota": "Monthly quota",
      "pegaUserCreatedAt": "Created at",
      "pegaUserUpdatedAt": "Updated at",
      "providerConfigPages": "LLM configuration pages"
    },
    "descriptions": {
      "enablePreview": "Double-click files to preview them before opening the default app.",
      "autoSaveRAG": "Automatically add imported files to the RAG knowledge base.",
      "autoTagEnabled": "Automatically extract tags for files during import or processing.",
      "tagSummaryMaxLength": "Maximum characters used when generating tag summaries (affects auto-tagging).",
      "autoClassify": "Skip confirmation dialogs when saving files to recommended directories.",
      "useLocalService": "When enabled, use the local Python service (typically http://localhost:8000). When disabled, you can configure a remote API URL.",
      "workDirectory": "The workspace folder is defined during setup. Re-run the setup wizard to change it.",
      "apiBaseUrl": "Base URL of this program's web service.",
      "llmProvider": "Applies to intelligent directory suggestions, embeddings, and chat analysis.",
      "pegaApiKey": "Stored securely in config.json. Update it by signing in below when it expires.",
  "pegaMode": "Choose which backend the Pega platform should use for LLM requests.",
      "providerConfigPages": "Open dedicated pages to manage credentials and defaults for each provider."
    },
    "placeholders": {
      "apiBaseUrl": "http://localhost:8000"
    },
    "themeOptions": {
      "light": "Light",
      "dark": "Dark"
    },
    "options": {
      "llmProviders": {
        "ollama": "Ollama (local)",
        "pega": "Pega Platform",
        "openai": "OpenAI",
        "openrouter": "OpenRouter",
        "bailian": "Alibaba Bailian",
        "azureOpenai": "Azure OpenAI"
      }
    },
    "common": {
      "enabled": "Enabled",
      "disabled": "Disabled"
    },
    "actions": {
      "save": "Save settings",
      "reset": "Reset to defaults",
      "clear": "Clear all data",
      "back": "Back to files",
      "saveApiBaseUrl": "Save API URL",
      "managePegaAccount": "Manage Pega account",
      "configureOllama": "Configure Ollama",
      "configureOpenai": "Configure OpenAI",
      "configureOpenrouter": "Configure OpenRouter",
      "configureBailian": "Configure Bailian",
      "refreshPegaStatus": "Check status"
    },
    "messages": {
      "saveSuccess": "Settings saved",
      "saveError": "Failed to save settings",
      "apiSuccess": "API base URL saved",
      "apiError": "Failed to update API base URL",
      "resetSuccess": "Settings reset",
      "clearConfirmTitle": "Clear all data?",
      "clearConfirmContent": "This will delete imported files, database records, and chat history. This action cannot be undone.",
      "clearConfirmOk": "Clear now",
      "clearConfirmCancel": "Cancel",
      "clearSuccess": "All data cleared",
      "clearError": "Failed to clear data: {reason}",
      "clearException": "An unexpected error occurred while clearing data.",
      "unknownError": "Unknown error",
      "providerUpdated": "LLM provider updated",
      "providerUpdateError": "Failed to update LLM provider",
      "pegaKeyMissing": "No API key saved",
      "pegaLoginRestriction": "未登录用户大语言模型调用频率有限制",
      "pegaLoadingUser": "Loading account information...",
      "pegaUserMissing": "Unable to load account information.",
      "pegaValueUnavailable": "Unavailable",
      "pegaLoginSuccess": "Signed in successfully",
      "pegaLoginFailed": "Sign-in failed. Please try again.",
      "pegaApiKeyFailed": "Failed to fetch API key",
      "pegaApiKeySuccess": "API key retrieved and saved",
      "pegaFetchUserFailed": "Failed to load Pega account information.",
      "pegaUnauthorized": "Session expired. Please sign in again.",
      "pegaUserNotFound": "No user record was returned.",
      "pegaStatusCredentialHint": "Sign in to load the Pega API key before checking status.",
      "pegaStatusLoading": "Checking Pega status...",
      "pegaStatusMissingCredential": "No API key or token available. Sign in first.",
      "pegaStatusUnauthorized": "Authentication failed when contacting Pega. Sign in again.",
      "pegaStatusFetchFailed": "Failed to load Pega service status.",
      "pegaStatusAvailable": "Available",
      "pegaStatusUnavailable": "Unavailable",
      "pegaStatusModels": "Models: {models}",
      "pegaStatusNoData": "No status data yet.",
      "pegaModeUpdated": "Pega mode updated",
      "pegaModeUpdateError": "Failed to update Pega mode"
    }
  },
  "providerConfig": {
    "common": {
      "back": "Back to Settings",
      "save": "Save changes",
      "reset": "Reset",
      "restoreDefaults": "Restore defaults",
      "restoredDefaults": "Default values applied. Save to persist.",
      "envHint": "Environment variables override these fields if defined at startup.",
      "loadError": "Failed to load provider settings.",
      "saveSuccess": "Provider settings saved.",
      "saveError": "Failed to save provider settings.",
      "loading": "Loading configuration..."
    },
    "ollama": {
      "title": "Ollama configuration",
      "description": "Update the local Ollama gateway endpoint and default models.",
      "fields": {
        "endpoint": {
          "label": "Gateway endpoint",
          "placeholder": "http://127.0.0.1:11434"
        },
        "model": {
          "label": "Chat model",
          "placeholder": "qwen3:8b",
          "extra": "Default model: qwen3:8b"
        },
        "embedModel": {
          "label": "Embedding model",
          "placeholder": "bge-m3",
          "extra": "Default embedding model: bge-m3"
        },
        "visionModel": {
          "label": "Vision model",
          "placeholder": "qwen2.5vl:7b",
          "extra": "Default vision model: qwen2.5vl:7b"
        },
        "apiKey": {
          "label": "API key",
          "placeholder": "Leave blank when no key is required"
        }
      }
    },
    "openai": {
      "title": "OpenAI configuration",
      "description": "Provide organization credentials and preferred models for OpenAI.",
      "fields": {
        "apiKey": {
          "label": "API key",
          "placeholder": "sk-..."
        },
        "endpoint": {
          "label": "API endpoint",
          "placeholder": "https://api.openai.com/v1"
        },
        "organization": {
          "label": "Organization ID",
          "placeholder": "Optional organization identifier"
        },
        "model": {
          "label": "Chat model",
          "placeholder": "gpt-4o-mini",
          "extra": "Default model: gpt-4o-mini"
        },
        "embedModel": {
          "label": "Embedding model",
          "placeholder": "text-embedding-3-large",
          "extra": "Default embedding model: text-embedding-3-large"
        },
        "visionModel": {
          "label": "Vision model",
          "placeholder": "gpt-4o-mini",
          "extra": "Default vision model: gpt-4o-mini"
        }
      }
    },
    "openrouter": {
      "title": "OpenRouter configuration",
      "description": "Connect to OpenRouter and pick preferred hosted models.",
      "fields": {
        "apiKey": {
          "label": "API key",
          "placeholder": "or-..."
        },
        "endpoint": {
          "label": "API endpoint",
          "placeholder": "https://openrouter.ai/api/v1"
        },
        "model": {
          "label": "Chat model",
          "placeholder": "openai/gpt-oss-20b:free",
          "extra": "Default model: openai/gpt-oss-20b:free"
        },
        "embedEndpoint": {
          "label": "Embedding endpoint",
          "placeholder": "https://openrouter.ai/api/v1/embeddings"
        },
        "embedModel": {
          "label": "Embedding model",
          "placeholder": "voyage/voyage-large-2-instruct",
          "extra": "Default embedding model: voyage/voyage-large-2-instruct"
        }
      }
    },
    "bailian": {
      "title": "Alibaba Bailian configuration",
      "description": "Configure Bailian credentials and default models.",
      "fields": {
        "apiKey": {
          "label": "API key",
          "placeholder": "Enter the Bailian API key"
        },
        "endpoint": {
          "label": "API endpoint",
          "placeholder": "https://dashscope.aliyuncs.com"
        },
        "model": {
          "label": "Chat model",
          "placeholder": "qwen-plus",
          "extra": "Default model: qwen-plus"
        },
        "embedModel": {
          "label": "Embedding model",
          "placeholder": "text-embedding-v1",
          "extra": "Default embedding model: text-embedding-v1"
        }
      }
    }
  },
  "pegaAuth": {
    "pageTitle": "Pega Platform Account",
    "description": "Sign in or register to retrieve your API key for the Pega LLM gateway.",
    "tabs": {
      "login": "Sign in",
      "register": "Register"
    },
    "form": {
      "password": "Password",
      "confirmPassword": "Confirm password",
      "identifier": "Email or phone"
    },
      "placeholders": {
        "identifier": "Enter email or phone"
      },
    "actions": {
      "login": "Sign in",
      "register": "Create account",
      "logout": "Sign out",
      "back": "Back",
      "backToSettings": "Return to Settings"
    },
    "status": {
      "activeProvider": "Pega provider status",
      "notice": "After a successful login your workspace automatically switches to the Pega provider.",
      "apiKey": "Current API key",
      "token": "Current session token"
    },
    "messages": {
      "registerSuccess": "Registration successful. You can now sign in.",
      "registerFailed": "Registration failed. Please try again.",
      "loginSuccess": "Login successful",
      "loginFailed": "Login failed. Check your credentials and try again.",
      "apiKeySuccess": "API key retrieved and saved",
      "apiKeyFailed": "Failed to fetch API key",
      "noApiKey": "No API key",
      "noToken": "No token",
      "logoutConfirmTitle": "Sign out?",
      "logoutConfirmMessage": "Signing out removes the saved API key and token for the Pega provider.",
      "logoutSuccess": "Signed out successfully.",
      "logoutFailed": "Sign out failed. Please try again."
    },
    "validation": {
      "passwordRequired": "Please enter a password",
      "passwordLength": "Password should be at least 6 characters",
      "confirmPasswordRequired": "Please confirm your password",
      "passwordMismatch": "Passwords do not match",
      "identifierRequired": "Please enter your email or phone",
      "identifierFormat": "Please enter a valid email address or phone number"
    }
  },
  "bot": {
    "messages": {
      "importingToRag": "Importing to RAG library...",
      "importedToRagSuccess": "File successfully imported to RAG library",
      "saveSuccessRagFailed": "File saved successfully, but importing to RAG library failed",
      "selectSaveDirectory": "Please select save directory",
      "fileSavedTo": "File saved to: {path}",
      "fileSaveFailed": "File save failed",
      "getDirectoryStructureFailed": "Failed to get directory structure",
      "analyzingFile": "Analyzing file and recommending save directory...",
      "getRecommendationFailed": "Failed to get recommendation",
      "fileAutoSavedTo": "File automatically saved to: {path}",
      "fileImportFailed": "File import failed",
      "errorProcessingFiles": "Error processing files",
      "workdirNotSet": "Work directory is not configured",
      "openWorkdirFailed": "Failed to open work directory",
      "openFolderNotSupported": "Opening folders is not supported in this environment",
      "droppedFilePath": "FilePath: {path}",
      "filesDroppedCount": "{count} files dropped",
      "fetchingWebpage": "Fetching webpage content...",
      "webImportSuccess": "Webpage content imported",
      "webImportFailed": "Failed to import webpage content",
      "invalidUrl": "Please provide a valid URL",
      "clipboardEmpty": "Clipboard does not contain a URL",
      "webImportInProgress": "Webpage import already in progress"
    }
    ,
    "menu": {
      "importFile": "Import File",
      "openWorkdir": "Open Workdir",
      "showMain": "Show Main Window",
      "hideBot": "Hide Bot Window",
      "exitApp": "Exit Application",
      "botImageAlt": "Assistant Bot",
      "search": "Search",
      "pasteUrl": "Paste URL"
    }
  },
  "convert": {
    "pageTitle": "File Format Conversion",
    "description": "Select local files and convert to desired format with one click",
    "actions": {
      "refreshFormats": "Refresh Format List",
      "selectFile": "Select File",
      "selectDirectory": "Select Directory",
      "startConversion": "Start Conversion",
      "openFile": "Open File",
      "openDirectory": "Open Directory"
    },
    "sections": {
      "settings": "Conversion Settings",
      "result": "Conversion Result"
    },
    "labels": {
      "sourceFile": "Source File",
      "targetFormat": "Target Format",
      "outputDirectory": "Output Directory",
      "overwrite": "Overwrite existing files",
      "outputFileLabel": "Output File:",
      "sourceFileLabel": "Source File:",
      "targetFormatLabel": "Target Format:",
      "fileSize": "File Size:",
      "conversionInfo": "Conversion Info:"
    },
    "placeholders": {
      "selectFile": "Please select the file to convert",
      "selectFormat": "Please select target format",
      "defaultDirectory": "Default uses system conversion directory"
    },
    "alerts": {
      "noFormats": "Conversion formats not yet retrieved, please refresh and try again",
      "pandocNotAvailable": "Pandoc not detected, only Markdown conversion is supported.",
      "pandocDescription": "Please install Pandoc in the system and reopen the app to enable more conversion formats."
    },
    "messages": {
      "fetchFormatsFailed": "Failed to fetch conversion formats",
      "desktopNotAvailable": "Desktop environment not available",
      "selectFileFailed": "Failed to select file",
      "selectDirectoryFailed": "Failed to select directory",
      "selectFileFirst": "Please select a file to convert first",
      "selectTargetFormat": "Please select target format",
      "pandocNotAvailable": "Pandoc not detected in current environment, only Markdown conversion is supported",
      "conversionSuccess": "File conversion successful",
      "conversionFailed": "File conversion failed",
      "cannotOpenFile": "Cannot open file",
      "cannotOpenDirectory": "Cannot open directory"
    }
  },
  "files": {
    "pageTitle": "File Management",
    "pageDescription": "View and manage files imported into the system",
    "table": {
      "columns": {
        "name": "Name",
        "path": "File Path",
        "type": "Type",
        "category": "Category",
        "size": "Size",
        "tags": "Tags",
        "addedAt": "Added Time",
        "status": "Status",
        "importStatus": "Import Status",
        "ragStatus": "RAG Status",
        "actions": "Actions"
      },
      "importStatus": {
        "imported": "Completed",
        "pending": "Pending"
      },
      "ragStatus": {
        "imported": "Imported",
        "notImported": "Not Imported"
      },
      "category": {
        "uncategorized": "Uncategorized"
      }
    },
    "actions": {
      "preview": "Preview",
      "openDirectory": "Open Directory",
      "openFile": "Open File",
      "importToRag": "Import to Knowledge Base",
      "askQuestion": "Ask Question",
      "editFile": "Edit",
  "generateTags": "Generate Tags",
  "delete": "Delete"
    },
    "edit": {
      "modalTitle": "Edit File",
      "nameLabel": "Name",
      "categoryLabel": "Category",
      "tagsLabel": "Tags"
    },
    "delete": {
      "confirmTitle": "Delete \"{name}\"?",
  "confirmMessage": "The file record will be removed from the knowledge base. You can also move the original file to the system recycle bin.",
  "deleteFromDiskLabel": "Move the original file to the recycle bin",
      "okText": "Delete"
    },
    "placeholders": {
      "searchFileName": "Search by name, tags, or category",
      "selectCategory": "Select category",
      "selectType": "Select type",
      "tagsCommaSeparated": "tag1, tag2"
    },
    "options": {
      "categories": {
        "document": "Document",
        "sheet": "Sheet",
        "image": "Image",
        "video": "Video",
        "audio": "Audio",
        "archive": "Archive",
        "other": "Other"
      },
      "types": {
        "pdf": "PDF",
        "docx": "Word",
        "xlsx": "Excel",
        "pptx": "PowerPoint",
        "txt": "Text",
        "jpg": "JPG",
        "png": "PNG",
        "mp4": "MP4",
        "zip": "ZIP"
      }
    },
    "buttons": {
      "search": "Search",
      "refresh": "Refresh",
      "importUrl": "Import URL",
      "importFile": "Import File",
      "createFolder": "Create Folder"
    },
    "pagination": {
      "showTotal": "Items {start}-{end} of {total}"
    },
    "messages": {
      "fetchFilesFailed": "Failed to fetch file list",
      "openDirectoryFailed": "Failed to open directory",
      "openDirectoryNotSupported": "Directory opening not supported",
      "openFileFailed": "Failed to open file",
      "openFileNotSupported": "File opening not supported",
      "createFolderSuccess": "Folder created successfully",
      "createFolderFailed": "Failed to create folder",
      "createFolderInvalidName": "Please enter a valid folder name",
      "createFolderInvalidChars": "Folder name contains invalid characters",
      "importingToRag": "Importing file \"{name}\" to knowledge base...",
      "importedToRagSuccess": "File \"{name}\" successfully imported to knowledge base",
      "importToRagFailed": "Failed to import file \"{name}\"",
      "getDirectoryStructureFailed": "Failed to get directory structure",
      "analyzingFile": "Analyzing file and recommending save directory...",
      "getRecommendationFailed": "Failed to get recommendation",
      "fileAutoSavedTo": "File automatically saved to: {path}",
      "fileSaveFailed": "File save failed",
      "fileImportFailed": "File import failed",
  "preparingFile": "Preparing file in temporary workspace...",
  "stageFailed": "Failed to prepare file. Please try again.",
  "stageMissing": "Temporary file information missing. Please re-import the file.",
      "importingRag": "Importing to RAG library...",
      "importedRagSuccess": "File successfully imported to RAG library",
      "saveSuccessRagFailed": "File saved successfully, but importing to RAG library failed",
      "describingImage": "Describing image content for analysis...",
      "imageDescription": "Image description: {text}",
      "conversionError": "File conversion failed. Please verify the conversion service configuration.",
      "conversionErrorWithReason": "File conversion failed: {reason}",
      "retryImportConfirmTitle": "Retry importing \"{name}\"?",
      "retryImportConfirmContent": "The previous import didn't finish. Do you want to retry now?",
      "retryImportQueued": "Retry import started for \"{name}\".",
      "retryImportFailed": "Failed to start retry import for \"{name}\".",
      "retryImportMissingSource": "Cannot retry import because the staged file is missing. Please import from the original file again.",
      "retryImportUnavailable": "Retry import is currently unavailable. Please try again later.",
      "fileInWorkspaceProcessed": "File already in workspace processed successfully",
      "updateSuccess": "File updated",
      "updateFailed": "Failed to update file",
      "editInvalidName": "Please enter a valid file name",
      "deleteSuccess": "File \"{name}\" deleted",
      "deleteFailed": "Failed to delete file \"{name}\"",
      "generateTagsInProgress": "Generating tags for \"{name}\"...",
      "generateTagsSuccess": "Updated tags for \"{name}\".",
      "generateTagsFailed": "Failed to generate tags for \"{name}\".",
      "generateTagsNoContent": "Cannot generate tags because no analyzable content is available.",
      "generateTagsAlreadyExists": "\"{name}\" already has tags. Enable overwrite to regenerate them.",
      "generateTagsNoChange": "Tags for \"{name}\" remain unchanged."
    },
    "createFolder": {
      "modalTitle": "Create Folder",
      "label": "Folder name",
      "placeholder": "Enter folder name (relative to workspace)",
      "help": "The folder will be created under the current workspace directory",
      "okText": "Create",
      "cancelText": "Cancel"
    },
    "import": {
      "modalTitle": "Select Save Directory",
      "manualModalTitle": "Manually Select Save Directory",
      "confirmSave": "Confirm Save",
      "confirmSelect": "Confirm Selection",
      "manualSelectButton": "Manual Directory Selection",
      "recommendText": "System recommends saving to: {path}",
      "selectTargetPrompt": "Please choose the target directory to save the file:",
      "selectPlaceholder": "Please select a directory",
      "suffixRecommended": "(Recommended)",
      "suffixAlternative": "(Alternative)",
      "selectSaveDirectory": "Please select save directory",
      "fileSavedTo": "File saved to: {path}"
    }
  },
  "home": {
    "pageTitle": "File Management",
    "currentDirectory": "Current Directory: {path}",
    "table": {
      "columns": {
        "name": "Name",
        "type": "Type",
        "size": "Size",
        "createdAt": "Created Time",
    "modifiedAt": "Modified Time",
    "status": "Status",
        "actions": "Actions"
      },
      "type": {
        "folder": "Folder",
        "file": "File"
      }
    },
    "actions": {
      "preview": "Preview",
      "importToRag": "Import to Knowledge Base",
      "openFolder": "Open Folder",
      "openFile": "Open File",
      "importFile": "Import"
    },
    "status": {
      "imported": "Imported",
      "processing": "Processing",
      "notImported": "Not Imported",
      "notImportedLabel": "{status} · {label}"
    },
    "buttons": {
      "goUp": "Go Up",
      "importFile": "Import File",
      "createFolder": "Create Folder"
    },
    "buttonTitles": {
      "goUp": "Go to Parent Directory",
      "importFile": "Import File to Workspace"
    },
    "import": {
      "modalTitle": "Select Save Directory",
      "manualModalTitle": "Manually Select Save Directory",
      "confirmSave": "Confirm Save",
      "confirmSelect": "Confirm Selection",
      "manualSelectButton": "Manual Directory Selection",
      "recommendText": "System recommends saving to: {path}",
      "selectTargetPrompt": "Please choose the target directory to save the file:",
      "selectPlaceholder": "Please select a directory",
      "selectSaveDirectory": "Please select save directory",
      "fileSavedTo": "File saved to: {path}",
      "fileSaveFailed": "File save failed",
      "fileImportFailed": "File import failed"
    },
    "messages": {
      "loadDirectoryFailed": "Failed to load directory",
      "getDirectoryStructureFailed": "Failed to get directory structure",
      "importingToRag": "Importing to knowledge base...",
      "importedToRagSuccess": "File successfully imported to knowledge base",
      "importToRagFailed": "Failed to import to knowledge base",
      "analyzingFile": "Analyzing file and recommending save directory...",
      "getRecommendationFailed": "Failed to get recommendation",
      "fileAutoSavedTo": "File automatically saved to: {path}",
      "cannotOpenFolder": "Cannot open folder",
      "openFolderFailed": "Failed to open folder",
      "cannotOpenFile": "Cannot open file",
      "openFileFailed": "Failed to open file",
      "saveSuccessRagFailed": "File saved successfully, but importing to knowledge base failed",
      "importingRag": "Importing to RAG library...",
      "importedRagSuccess": "File successfully imported to RAG library",
      "createFolderSuccess": "Folder created successfully",
      "createFolderFailed": "Failed to create folder",
      "createFolderInvalidName": "Please enter a valid folder name",
      "createFolderInvalidChars": "Folder name contains invalid characters",
      "loadFileStatusFailed": "Failed to load file status"
    }
  },
  "landing": {
    "title": "AI File Manager",
    "version": "Version {version}",
    "description": "An intelligent file management system powered by AI. Organize, search, and manage your files with advanced features.",
    "resetButton": "Reset Initialization (Test)",
    "resetMessage": "Initialization status has been reset"
  },
  "sidebar": {
    "fileList": "File List",
    "search": "Search",
    "fileManagement": "File Management",
    "fileConvert": "File Convert",
    "settings": "Settings"
  },
  "search": {
    "tabs": {
      "filenameSearch": "Filename Search",
      "qa": "Smart Q&A"
    },
    "placeholders": {
      "filenameSearch": "Enter filename keywords to search",
      "qa": "Enter a question for smart Q&A"
    },
    "buttons": {
      "search": "Search",
      "ask": "Ask",
      "analyze": "Analyze"
    },
    "messages": {
      "emptyQuestion": "Please enter a question.",
      "askFailed": "Failed to get answer.",
      "askRequestFailed": "Request failed, please try again.",
  "semanticSearchFailed": "Failed to retrieve related context. Please try again.",
      "loadReferencedFilesFailed": "Failed to load referenced files.",
      "getChunkFailed": "Failed to get chunk content.",
      "copySuccess": "Copied preview: {text}",
      "copyFailed": "Copy failed.",
      "openFileFailed": "Failed to open the file.",
      "openFileNotSupported": "Opening files is not supported on this platform.",
      "searchNoResults": "No results found. Try adjusting filters or keywords.",
      "noChunksSelected": "Please select at least one chunk before analyzing.",
      "queryPurposeFallback": "Failed to analyze question intent. Falling back to retrieval mode.",
      "summaryNoDocuments": "No referenced documents available for summarization. Using retrieval instead.",
      "summaryFailed": "Failed to summarize selected documents."
    },
    "loading": {
      "searching": "Searching...",
      "thinking": "Thinking..."
    },
    "results": {
      "found": "Found {count} results"
    },
    "modal": {
      "previewTitle": "Chunk Content Preview",
      "close": "Close",
      "openFile": "Open File",
      "loading": "Loading chunk content..."
    },
    "qa": {
      "resultTitle": "Smart Q&A Result",
      "confidence": "Confidence:",
      "sources": "Reference Sources:",
      "path": "Path:",
      "chunk": "Chunk {index}",
  "preview": "Preview Content",
  "openFile": "Open File",
  "openSourceFile": "Open Source File",
  "openSourceFileTooltip": "Copied snippet. Search after the file opens.",
      "similarityThreshold": "Similarity Threshold",
      "contextLimit": "Context Limit",
      "maxTokens": "Max Tokens",
      "temperature": "Temperature",
  "answerPlaceholder": "Ask a question to see the answer here.",
      "referencedFiles": "Referenced Files",
      "searchResultsTitle": "Search Results",
      "resultsCount": "{count} chunks",
      "retrievalTime": "Retrieval {value} ms",
      "selectedCount": "Selected {count}",
      "selectTop": "Select Top {count}",
      "clearSelection": "Clear",
      "noResultsPlaceholder": "No related chunks yet. Try a new search.",
      "relevance": "Relevance {value}%",
      "matchReason": {
        "content": "Content match",
        "fileName": "Filename match",
        "category": "Category match",
        "tag": "Tag match",
        "vector": "Vector similarity"
      },
      "retrievalMode": {
        "keyword": "Keyword first",
        "vector": "Vector fallback",
        "manual": "Manual selection",
        "none": "Not searched"
      },
      "summaryConfidence": "Summary Confidence",
      "summaryHighlights": "Key Highlights",
      "summaryDocumentsTitle": "Summarized Documents"
    },
    "preview": {
      "contentType": "Content Type:",
      "charCount": "Character Count:",
      "tokenCount": "Token Count:"
    }
  },
  "filePreview": {
    "modalTitle": "Preview - {fileName}",
    "buttons": {
      "openInFolder": "Open in Folder",
      "openWithDefault": "Open with Default App",
      "close": "Close",
      "maximize": "Maximize",
      "restore": "Restore"
    },
    "messages": {
      "loadFailed": "Failed to load preview",
      "unsupportedFileType": "Unsupported file type",
      "truncatedMessage": "... File content is too long, truncated display (first 10KB)...",
      "openFolderFailed": "Failed to open folder",
      "openFileFailed": "Failed to open file",
      "videoPlaybackNotSupported": "Your environment cannot play this video."
    },
    "loading": {
      "loadingPreview": "Loading preview..."
    },
    "info": {
      "contentType": "Content Type:",
      "charCount": "Character Count:",
      "tokenCount": "Token Count:"
    }
  }
}
